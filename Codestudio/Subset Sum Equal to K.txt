#include <bits/stdc++.h> 

bool solver(int n, int target, vector<int> &arr, vector<vector<int>> & dp) {
    if(target == 0) return true;
    if(n == 0) {
        if(target == arr[0]) return true;
        return false;
    }

    if(dp[n][target] != -1) return dp[n][target];

    bool notTake = solver(n - 1, target, arr, dp);
    
    bool take = false;
    if(arr[n] <= target) {
        take = solver(n - 1, target - arr[n], arr, dp);
    }

    return dp[n][target] = take || notTake;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<int>> dp(n, vector<int> (k + 1, -1));
    return solver(n - 1, k, arr, dp);
}