/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null) return true;
        
        Stack<Integer> st = new Stack<>();
        ListNode temp = head;
        
        while(temp!=null){
            st.push(temp.val);
            temp = temp.next;
        }
        
        temp = head;
        
        while(!st.isEmpty()){
            if(temp.val!=st.peek()){
                return false;
            }
            st.pop();
            temp = temp.next;
        }
        
        return true;
    }
}

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL) return true;
        
        vector<int> vi;
        ListNode* temp = head;
        
        while(temp!=NULL){
            vi.push_back(temp->val);
            temp = temp->next;
        }
        
        temp = head;
        
        while(!vi.empty()){
            if(temp->val!=vi[vi.size()-1]){
                return false;
            }
            temp = temp->next;
            vi.pop_back();
        }
        
        return true;
    }
};