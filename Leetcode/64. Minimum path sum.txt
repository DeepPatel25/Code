class Solution {
public:
    int func(int i, int j, vector<vector<int>> &grid, vector<vector<int>> &dp){
        if(i < 0 || j < 0) return 1e9;
        if(i == 0 && j == 0) return dp[i][j] = grid[i][j];
        if(dp[i][j] != -1) return dp[i][j];

        int up = grid[i][j] + func(i-1, j, grid, dp);
        int left = grid[i][j] + func(i, j-1, grid, dp);

        return dp[i][j] = min(up, left);
    }

    int minPathSum(vector<vector<int>>& grid) {
        // Recursion Approach

        // int n = grid.size();
        // int m = grid[0]. size();
        // vector<vector<int>> dp(n, vector<int>(m, -1));

        // return func(n-1, m-1, grid, dp);

        // Iterative approach
        int n = grid.size();
        int m = grid[0].size();

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(i==0 && j!=0) grid[i][j] += grid[i][j-1];
                if(j==0 && i!=0) grid[i][j] += grid[i-1][j];
                if(i!=0 && j!=0) grid[i][j] += min(grid[i-1][j], grid[i][j-1]);
            }
        }

        return grid[n-1][m-1];
    }
};