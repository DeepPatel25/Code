pair<int, int> findFirstLastPosition(vector<int> &arr, int n, int x)
{
	pair<int, int> p = {-1, -1};
	int s = 0;
	int e = n - 1;

	while(s <= e){
		int mid = s + (e - s) / 2;
		
		if(arr[mid] == x){
			p.first = mid;
			e = mid - 1;
		} else if (arr[mid] < x){
			s = mid + 1;
		} else {
			e = mid - 1;
		}
	}

	s = 0;
	e = n - 1;

	while(s <= e){
		int mid = s + (e - s) / 2;
		
		if(arr[mid] == x){
			p.second = mid;
			s = mid + 1;
		} else if (arr[mid] < x){
			s = mid + 1;
		} else {
			e = mid - 1;
		}
	}

	return p;
}


#include <bits/stdc++.h>

vector<int> searchRange(vector<int> &arr, int x)
{
	int n = arr.size();
	int first = lower_bound(arr.begin(), arr.end(), x) - arr.begin();
	int last = upper_bound(arr.begin(), arr.end(), x) - arr.begin() - 1;

	vector<int> ans;
	if(first == n || arr[first] != x) {
		first = -1; 
		last = -1;
	}

	ans.push_back(first);
	ans.push_back(last);
	return ans;
}


