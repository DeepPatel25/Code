//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    void solver(vector<vector<char>>& grid, int i, int j) {
        vector<int> dx = {0, 1, 1, 1, 0, -1, -1, -1};
        vector<int> dy = {1, 1, 0, -1, -1, -1, 0, 1};
        
        grid[i][j] = '0';
        
        for(int k = 0; k < 8; k++) {
            int newI = i + dx[k];
            int newJ = j + dy[k];
            
            if(newI >= 0 && newI < grid.size() && newJ >= 0 && newJ < grid[0].size() &&
                grid[newI][newJ] == '1') {
                    solver(grid, newI, newJ);
                }
        }
    } 
    
    int numIslands(vector<vector<char>>& grid) {
        int count = 0;
        int row = grid.size();
        int col = grid[0].size();
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == '1') {
                    solver(grid, i, j);
                    count++;
                }
            }
        }
        
        return count;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends