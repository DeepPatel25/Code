//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
    void solver(vector<vector<int>>& image, int sr, int sc, int oldColor, int newColor) {
        vector<int> dx = {0, 1, 0, -1};
        vector<int> dy = {1, 0, -1, 0};
        
        for(int i = 0; i < 4; i++) {
            int newSr = sr + dx[i];
            int newSc = sc + dy[i];
            
            if(newSr >= 0 && newSc >= 0 && newSr < image.size() && newSc < image[0].size()
                && image[newSr][newSc] == oldColor) {
                    image[newSr][newSc] = newColor;
                    solver(image, newSr, newSc, oldColor, newColor);
                }
        }
    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        if(image[sr][sc] == newColor) return image;
        
        int oldColor = image[sr][sc];
        image[sr][sc] = newColor;
        
        solver(image, sr, sc, oldColor, newColor);
        
        return image;
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>image(n, vector<int>(m,0));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++)
				cin >> image[i][j];
		}
		int sr, sc, newColor;
		cin >> sr >> sc >> newColor;
		Solution obj;
		vector<vector<int>> ans = obj.floodFill(image, sr, sc, newColor);
		for(auto i: ans){
			for(auto j: i)
				cout << j << " ";
			cout << "\n";
		}
	}
	return 0;
}
// } Driver Code Ends