#include <bits/stdc++.h>

int f(int i, int j, vector<vector<int>> &triangle, int n, vector<vector<int>> &dp){
	if(i==n-1) {
		return dp[n-1][j] = triangle[n-1][j];
	}
	if(dp[i][j]!=-1) return dp[i][j];

	int d = triangle[i][j] + f(i+1, j, triangle, n, dp);
	int dg = triangle[i][j] + f(i+1, j+1, triangle, n, dp);

	return dp[i][j] =  min(d, dg);
}

int minimumPathSum(vector<vector<int>>& triangle, int n){
	// vector<vector<int>> dp(n, vector<int>(n, -1));
	// vector<vector<int>> dp(n, vector<int>(n, 0));
	// return f(0, 0, triangle, n, dp);
	vector<int> prev(n);

	for(int i=0; i<n; i++) prev[i] = triangle[n-1][i]; 

	for(int i=n-2; i>=0; i--){
		vector<int> curr(n);
		for(int j=i; j>=0; j--){
			int d = triangle[i][j] + prev[j];
			int dg = triangle[i][j] + prev[j+1];
			curr[j] = min(dg, d);
		}
		prev = curr;
	}

	return prev[0];
	// return dp[0][0];
}